{"version":3,"file":"static/js/48.469e226c.chunk.js","mappings":"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","sources":["Components/Home/AboutAplus/index.jsx","../node_modules/.pnpm/@chakra-ui+image@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/.pnpm/@chakra-ui+image@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/.pnpm/@chakra-ui+image@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/image/src/image.tsx","../node_modules/.pnpm/@chakra-ui+image@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/utilities/object-utils/src/omit.ts","../node_modules/.pnpm/@chakra-ui+layout@2.3.1_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/.pnpm/@chakra-ui+layout@2.3.1_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/.pnpm/@chakra-ui+object-utils@2.1.0/node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n// import main from '../../../assets/Rectangle 14.png';\r\nimport main from \"../../../assets/black bg.png\"\r\nimport { Box, Heading, Image, Text } from '@chakra-ui/react';\r\nimport first from '../../../assets/Rectangle 21.png';\r\nimport second from '../../../assets/Rectangle 22.png';\r\nimport third from '../../../assets/part/1.jpeg';\r\nimport fourth from '../../../assets/part/2.jpeg';\r\nconst AboutUSMain = () => {\r\n  return (\r\n    <Box className=\"MainAboutUS\" zIndex={1} backgroundImage={main} as=\"section\">\r\n      <Box className='secondheaderaboutusBox'  maxW={\"1400px\"} m=\"auto\">\r\n\r\n      <Heading className='secondheaderaboutus' >ABOUT US</Heading>\r\n      </Box>\r\n      <Box maxW='1200px' m=\"auto\">\r\n        <Heading className=\"titleheaderabout\">About A-Plus</Heading>\r\n        <Text className=\"textabout\">\r\n          A–Plus is one of India’s leading manufacturer of sound reinforcement\r\n          products that deliver the most faithful and natural reproduction of\r\n          sound in a variety of applications.\r\n        </Text> \r\n        <Box className=\"ImagesAboutUs\" position={\"relative\"} zIndex={5}>\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={first} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={second} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={third} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={fourth} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={first} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={second} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={third} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={fourth} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={first} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={second} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={third} />\r\n          <Image loading=\"lazy\" className=\"imagesaboutussa\" src={fourth} />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AboutUSMain;\r\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["_jsxs","Box","className","zIndex","backgroundImage","as","children","_jsx","maxW","m","Heading","Text","position","Image","loading","src","first","second","third","fourth","NativeImage","forwardRef","props","ref","htmlWidth","htmlHeight","alt","rest","_objectWithoutProperties","_excluded","jsx","_objectSpread","width","height","displayName","fallbackSrc","fallback","srcSet","align","fit","ignoreFallback","crossOrigin","_props$fallbackStrate","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","status","onLoad","onError","sizes","_useState","useState","_useState2","_slicedToArray","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","object","_step","keysToOmit","arguments","length","undefined","clone","Object","assign","_iterator","_createForOfIteratorHelper","s","n","done","key","value","err","e","f","omit","chakra","styles","useStyleConfig","_omitThemingProps","omitThemingProps","decoration","casing","aliasedProps","compact","textAlign","textDecoration","textTransform","p","cx","__css","h2"],"sourceRoot":""}