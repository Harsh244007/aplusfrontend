{"version":3,"file":"static/js/683.c7df0c18.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@chakra-ui+breakpoint-utils@2.0.8/node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/.pnpm/@chakra-ui+button@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/.pnpm/@chakra-ui+button@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/.pnpm/@chakra-ui+button@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/.pnpm/@chakra-ui+button@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/button/src/button.tsx","../node_modules/.pnpm/@chakra-ui+button@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/.pnpm/@chakra-ui+image@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/.pnpm/@chakra-ui+image@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/.pnpm/@chakra-ui+image@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/image/src/image.tsx","../node_modules/.pnpm/@chakra-ui+image@2.1.0_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/utilities/object-utils/src/omit.ts","../node_modules/.pnpm/@chakra-ui+layout@2.3.1_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/.pnpm/@chakra-ui+layout@2.3.1_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/layout/src/heading.tsx","../node_modules/.pnpm/@chakra-ui+layout@2.3.1_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/.pnpm/@chakra-ui+layout@2.3.1_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/.pnpm/@chakra-ui+layout@2.3.1_@chakra-ui+system@2.6.1_react@18.2.0/node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/.pnpm/@chakra-ui+react-children-utils@2.0.6_react@18.2.0/node_modules/@chakra-ui/react-children-utils/dist/index.mjs","../node_modules/.pnpm/@chakra-ui+react-use-merge-refs@2.1.0_react@18.2.0/node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"sourcesContent":["// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"],"names":["breakpoints","Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","arrayToObjectNotation","values","bps","arguments","length","undefined","forEach","value","index","_createContext","createContext","strict","name","_createContext2","_slicedToArray","useButtonGroup","ButtonIcon","props","children","className","rest","_objectWithoutProperties","_excluded","_children","isValidElement","cloneElement","focusable","_className","cx","jsx","chakra","span","_objectSpread","display","alignSelf","flexShrink","displayName","ButtonSpinner","label","placement","_props$spacing","spacing","_props$children","Spinner","color","width","height","__css","marginProp","spinnerStyles","useMemo","_objectSpread2","alignItems","position","_defineProperty","div","Button","forwardRef","ref","group","styles","useStyleConfig","_omitThemingProps","omitThemingProps","_omitThemingProps$isD","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","_omitThemingProps$ico","iconSpacing","type","spinner","_omitThemingProps$spi","spinnerPlacement","as","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","_useButtonType","_useState","useState","_useState2","isButton","setIsButton","useCallback","node","tagName","useButtonType","_ref","defaultType","contentProps","jsxs","button","useMergeRefs","dataAttr","disabled","opacity","ButtonContent","Fragment","marginEnd","marginStart","NativeImage","htmlWidth","htmlHeight","alt","Image","fallbackSrc","fallback","src","srcSet","align","fit","loading","ignoreFallback","crossOrigin","_props$fallbackStrate","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","status","onLoad","onError","sizes","setStatus","useEffect","imageRef","useRef","load","flush","img","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","object","_step","keysToOmit","clone","assign","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","omit","Text","decoration","casing","aliasedProps","compact","textAlign","textDecoration","textTransform","p","Heading","h2","StackItem","flex","minWidth","Stack","isInline","directionProp","direction","justify","wrap","divider","shouldWrapChildren","dividerStyle","options","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","getValidChildren","child","isLast","_child","clonedDivider","_divider","flexDirection","flexWrap","gap","Children","toArray","filter","mergeRefs","_len","refs","_key","Error","concat","assignRef","_len2","_key2","apply"],"sourceRoot":""}