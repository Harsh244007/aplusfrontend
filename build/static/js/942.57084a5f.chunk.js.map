{"version":3,"file":"static/js/942.57084a5f.chunk.js","mappings":"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","sources":["Components/Home/Categories/singleproduct.jsx","Components/SingleMainProduct/index.jsx"],"sourcesContent":["import React from 'react';\r\nimport './index.css';\r\nimport {\r\n  Box,\r\n  // Container,\r\n  // Flex,\r\n  Heading,\r\n  // Input,\r\n  // InputGroup,\r\n  // InputRightAddon,\r\n  // Avatar,\r\n  // keyframes,\r\n  // SimpleGrid,\r\n  // Button,\r\n  Image,\r\n  // Icon,\r\n  Stack,\r\n  Text,\r\n  // useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\nimport Appstore from '../../../Store/Appstore';\r\nimport { AiOutlineArrowRight, AiOutlineArrowDown } from 'react-icons/ai';\r\nimport { Link } from 'react-router-dom';\r\nconst SingleProductCard = React.memo(({ heading, description, icon, href ,referLink=false}) => {\r\n\r\n  return (\r\n    <>\r\n    {!referLink?\r\n    <Link to={href}>\r\n    <Box\r\n      maxW=\"200px\"\r\n      // w={'full'}\r\n      className=\"featueProductsCard1\"\r\n      // borderWidth=\"1px\"\r\n      borderRadius=\"6px\"\r\n      h={285}\r\n      w=\"219px\"\r\n      // h=\"236px\"\r\n      overflow=\"hidden\"\r\n      // p={5}\r\n    >\r\n      <Stack className='featueProductsCard1FirstBox'  p={4} background={`#F8FBFD`} rowGap={5}>\r\n        <Image loading=\"lazy\"\r\n          src={icon}\r\n          w=\"179px\"\r\n          height=\"196px\"\r\n          objectFit=\"contain\"\r\n          alt={heading}\r\n          borderRadius={0}\r\n          // className=\"featuredprocutsimage\"\r\n        />\r\n      </Stack>\r\n      <Box className=\"overlay\"></Box>\r\n      <Box className='featueProductsCard1SecondBox' mt={2}>\r\n        <Heading overflow={\"visible\"} height={\"auto\"} fontSize={18} fontWeight={600} size=\"md\">\r\n          {heading}\r\n        </Heading>\r\n      </Box>\r\n    </Box>\r\n    </Link>:\r\n    \r\n    <a href={href} target=\"_blank\">\r\n      <Box\r\n      maxW=\"200px\"\r\n      // w={'full'}\r\n      className=\"featueProductsCard1\"\r\n      // borderWidth=\"1px\"\r\n      borderRadius=\"6px\"\r\n      h={285}\r\n      w=\"219px\"\r\n      // h=\"236px\"\r\n      overflow=\"hidden\"\r\n      // p={5}\r\n    >\r\n      <Stack align={'center'} p={4} background={`#F8FBFD`} rowGap={5}>\r\n        <Image loading=\"lazy\"\r\n          src={icon}\r\n          w=\"179px\"\r\n          height=\"196px\"\r\n          objectFit=\"contain\"\r\n          alt={heading}\r\n          borderRadius={0}\r\n          // className=\"featuredprocutsimage\"\r\n        />\r\n        {/* <Button variant={'solid'} size={'md'}>\r\n          View Product\r\n        </Button> */}\r\n      </Stack>\r\n\r\n      <Box mt={2}>\r\n        <Heading fontSize={20} fontWeight={600} size=\"md\">\r\n          {heading}\r\n        </Heading>\r\n      </Box>\r\n    </Box>\r\n      </a>}\r\n    </>\r\n  );\r\n});\r\nconst CategoriesProductCard = React.memo(({ icon }) => {\r\n\r\n  return (\r\n    <Box\r\n      maxW=\"219px\"\r\n      // w={'full'}\r\n      className=\"featueProductsCard2\"\r\n      // borderWidth=\"1px\"\r\n      borderRadius=\"16px\"\r\n      w=\"219px\"\r\n      // h=\"236px\"\r\n      overflow=\"hidden\"\r\n      // p={5}\r\n    >\r\n      <Heading className=\"headerfeatureprod\">All Categories</Heading>\r\n      <Text className=\"textfeatureprod\">\r\n        View All{' '}\r\n        {Appstore.device ? <AiOutlineArrowRight /> : <AiOutlineArrowDown />}\r\n      </Text>\r\n      {/* <Stack align={'center'} p={5} background={`#F8FBFD`} rowGap={5}> */}\r\n      <Image loading=\"lazy\"\r\n        src={icon}\r\n        w=\"219px\"\r\n        height=\"284px\"\r\n        objectFit=\"contain\"\r\n        // alt={heading}\r\n        borderRadius={0}\r\n        // className=\"featuredprocutsimage\"\r\n      />\r\n      {/* <Button variant={'solid'} size={'md'}>\r\n          View Product\r\n        </Button> */}\r\n      {/* </Stack> */}\r\n\r\n      {/* <Box mt={2}> */}\r\n\r\n      {/* <Heading fontSize={20} fontWeight={600} size=\"md\">{heading}</Heading> */}\r\n      {/* </Box> */}\r\n    </Box>\r\n  );\r\n});\r\n\r\nexport { SingleProductCard, CategoriesProductCard };\r\n","import React, { useEffect, useState } from 'react';\r\nimport './index.css';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Heading,\r\n  Image,\r\n  // List,\r\n  // ListItem,\r\n  Skeleton,\r\n  Text,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { SingleProductCard } from '../Home/Categories/singleproduct';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Pagination from '../Common/pagination';\r\nimport Appstore from '../../Store/Appstore';\r\nimport { useQuery } from 'react-query';\r\nimport axios from 'axios';\r\nconst MainProductDetails = () => {\r\n  const [desc, setDesc] = useState();\r\n  let { id, catid, name, catName } = useParams();\r\n  const url = `${Appstore.apilink}/returnProductDetails/${id}`;\r\n  const {\r\n    data,\r\n    refetch,\r\n    // status,\r\n    isRefetching,\r\n    // isPreviousData,\r\n    // isFetchedAfterMount,\r\n    // isLoading,\r\n  } = useQuery(['getSingleProducts'], async () => {\r\n    return axios.get(url).then(response => {\r\n      return response.data.data[0];\r\n    });\r\n  });\r\n  useEffect(() => {\r\n    refetch();\r\n    window.scrollTo(0, 0);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [name,refetch]);\r\n  if (!data) {\r\n    let timer;\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      refetch();\r\n    }, 4000);\r\n  }\r\n  if (!id) {\r\n    id = 50;\r\n  }\r\n  const url2 = `${Appstore.apilink}/returncategory/${catid}`;\r\n  const {\r\n    data: data2,\r\n    refetch: refetch2,\r\n    // isLoading: isloading2,\r\n  } = useQuery(['getMultipleCategories'], async () => {\r\n    return axios.get(url2).then(response => {\r\n      return response.data.data;\r\n    });\r\n  });\r\n\r\n  if (!data2) {\r\n    let timer2;\r\n    clearTimeout(timer2);\r\n    timer2 = setTimeout(() => {\r\n      refetch2();\r\n    }, 4000);\r\n  }\r\n  const [cpage, setCpage] = useState(1);\r\n  const postsPerPage = 4;\r\n  const lastposti = cpage * postsPerPage;\r\n  const firstposti = lastposti - postsPerPage;\r\n  let currentposts;\r\n  if (data2) {\r\n    currentposts = data2.slice(firstposti, lastposti);\r\n  }\r\n  let color = useColorModeValue('yellow.500', 'yellow.300');\r\n  if (data && !desc) {\r\n    const regex = /s:(\\d+):\"(.*?)\";/g;\r\n    let matches = [...data.pro_desc.matchAll(regex)];\r\n    const deserializedObjects = matches.map(match => {\r\n      const array = match[2];\r\n      const deserializedObject = `{${array}}`;\r\n      return deserializedObject;\r\n    });\r\n    setDesc(deserializedObjects);\r\n    console.log(\r\n      data.pro_desc.match(/s:(\\d+):\"(.*?)\";/g)[0],\r\n      'data of single product'\r\n    );\r\n  }\r\n  return (\r\n    <Box\r\n      className=\"mainSubProductsMain\"\r\n      as=\"section\"\r\n      flexDirection={'column'}\r\n      p={'20px'}\r\n      maxW={'1220px'}\r\n      m={'auto'}\r\n      mt={'100px'}\r\n    >\r\n      <Link\r\n        className=\"goBackMain\"\r\n        to={`/products/${catid}/${data && data.pro_name}`}\r\n      >\r\n        <Button\r\n          loadingText={'Loading'}\r\n          isLoading={data && !isRefetching && data.pro_name ? false : true}\r\n        >\r\n          Go Back\r\n        </Button>\r\n      </Link>\r\n      {/* <Heading textAlign={'center'}>\r\n        {data && !isRefetching ? data.pro_name : `Loading ${name}`}\r\n      </Heading>\r\n      {data && data.length !==0 && !isRefetching ? (\r\n        <Box\r\n          display={'flex'}\r\n          gap={'30px'}\r\n          flexWrap={'wrap'}\r\n          justifyContent={'space-around'}\r\n          alignItems={'center'}\r\n        >\r\n          <Box w={'350px'} h={'350px'} border={'2px dashed #dedede'}>\r\n            <Image\r\n              w={'346px'}\r\n              alt={data.pro_image}\r\n              objectFit={'contain'}\r\n              h={'346px'}\r\n              loading=\"lazy\"\r\n              src={`${Appstore.imageLink}/${data.pro_image}`}\r\n            />\r\n          </Box>\r\n\r\n          <Box className=\"secondBox\" w={'750px'}>\r\n            <Box>\r\n              <Text\r\n                fontWeight={'bold'}\r\n                fontSize={{ base: '16px', lg: '18px' }}\r\n                color={color}\r\n                // fontWeight={'500'}\r\n                textTransform={'uppercase'}\r\n                mb={'4'}\r\n              >\r\n                Product Details\r\n              </Text>\r\n\r\n              <Box spacing={2}>\r\n                {desc ? (\r\n                  <>\r\n                    {desc.map((e, i) => {\r\n                      if (i % 4 == 0 && i != 0) {\r\n                        console.log(e, desc[i - 3], 'main data');\r\n                        return (\r\n                          <Box key={i}>\r\n                            <Text as={'span'} fontWeight={'bold'}>\r\n                              {desc[i - 3].replace(/{|}/g, '')}\r\n                            </Text>{' '}\r\n                            {desc[i - 1].replace(/{|}/g, '')}\r\n                          </Box>\r\n                        );\r\n                      }\r\n                    })}\r\n                  </>\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </Box>\r\n             \r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      ) : (\r\n        <Skeleton height={650} width=\"100%\" />\r\n      )}\r\n      {data2 && data2.length != 0 ? (\r\n        <Box m={'auto'} gap={'30px'}>\r\n          <Heading>You might be interested in</Heading>\r\n          <Box\r\n            display={'flex'}\r\n            flexWrap={'wrap'}\r\n            gap={'30px'}\r\n            justifyContent={'space-evenly'}\r\n          >\r\n            {currentposts.map(e => {\r\n              console.log(e, 'data for all products');\r\n              let name = e.pro_name.replace(' ', '').replace(' ', '');\r\n              console.log(name, e.pro_name, 'name of single product');\r\n              return (\r\n                <SingleProductCard\r\n                  referLink={false}\r\n                  heading={e.pro_name ? e.pro_name : 'LoudSpeaker'}\r\n                  icon={`${Appstore.imageLink}/${e.pro_image}`}\r\n                  href={`/productDetails/${e.catid}/${e.showcaseid}/${name}/${catName}`}\r\n                />\r\n              );\r\n            })}\r\n          </Box>\r\n          {data2 && data2 != [] ? (\r\n            <Pagination\r\n              totalPosts={data2 && data2.length}\r\n              postsPerPage={postsPerPage}\r\n              setCurrentPage={setCpage}\r\n              currentPage={cpage}\r\n            />\r\n          ) : (\r\n            <Skeleton height={50} width=\"100%\" />\r\n          )}\r\n        </Box>\r\n      ) : (\r\n        <Skeleton height={450} width=\"100%\" />\r\n      )} */}\r\n      \r\n\r\n      <h2 style={{margin:\"auto\",fontSize:\"24px\"}}>This page is under construction</h2>\r\n    </Box>\r\n  );\r\n};\r\nexport default React.memo(MainProductDetails);\r\n {/* <ListItem>\r\n                  <Text as={'span'} fontWeight={'bold'}>\r\n                    Between lugs:\r\n                  </Text>{' '}\r\n                  20 mm\r\n                </ListItem>\r\n                \r\n                <ListItem>\r\n                  <Text as={'span'} fontWeight={'bold'}>\r\n                    Case:\r\n                  </Text>{' '}\r\n                  Steel\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Text as={'span'} fontWeight={'bold'}>\r\n                    Case diameter:\r\n                  </Text>{' '}\r\n                  42 mm\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Text as={'span'} fontWeight={'bold'}>\r\n                    Dial color:\r\n                  </Text>{' '}\r\n                  Black\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Text as={'span'} fontWeight={'bold'}>\r\n                    Crystal:\r\n                  </Text>{' '}\r\n                  Domed, scratch‑resistant sapphire crystal with anti‑reflective\r\n                  treatment inside\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Text as={'span'} fontWeight={'bold'}>\r\n                    Water resistance:\r\n                  </Text>{' '}\r\n                  5 bar (50 metres / 167 feet){' '}\r\n                </ListItem> */}"],"names":["SingleProductCard","React","_ref","heading","icon","description","href","_ref$referLink","referLink","_jsx","_Fragment","children","target","_jsxs","Box","maxW","className","borderRadius","h","w","overflow","Stack","align","p","background","rowGap","Image","loading","src","height","objectFit","alt","mt","Heading","fontSize","fontWeight","size","Link","to","CategoriesProductCard","_ref2","Text","Appstore","device","AiOutlineArrowRight","AiOutlineArrowDown","MainProductDetails","timer","_useState","useState","_useState2","_slicedToArray","desc","setDesc","_useParams","useParams","id","catid","name","url","catName","concat","apilink","_useQuery","useQuery","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","axios","get","then","response","data","stop","refetch","isRefetching","useEffect","window","scrollTo","clearTimeout","setTimeout","timer2","url2","_useQuery2","_callee2","_context2","data2","refetch2","_useState3","_useState4","cpage","lastposti","firstposti","slice","useColorModeValue","_toConsumableArray","pro_desc","matchAll","map","match","array","console","log","as","flexDirection","m","pro_name","Button","loadingText","isLoading","style","margin"],"sourceRoot":""}